{{#block "title"}}Handel drijven{{/block}}

<div class="container-compact">
	<h1>Handel drijven</h1>
	
	<div id="orders-confirmed-section" {{#unless has_confirmed}}class="d-none"{{/unless}}>
		<p class="success">Uw orders zijn bevestigd.</p>
		
		<button id="edit-orders-button" type="button" class="button-1">Wijzigen</button>
	</div>
	
	<div id="orders-overview-section" {{#if has_confirmed}}class="d-none"{{/if}}>
		<button id="create-order-button" class="button-2" type="button" 
				data-bs-toggle="offcanvas" data-bs-target="#create-order-window">
			Order maken
		</button>
		
		<form id="game-trade-form" method="POST" action="/game/actions/trade">
			<h2>üõí Kopen</h2>
			
			<h3>Producten</h3>
			<input id="product-buy-orders-input" type="hidden" name="productBuyOrders">
			<div id="product-buy-orders">
				<!-- list is added via JS -->
			</div>
			
			<h3>Gebouwen</h3>
			<input id="building-buy-orders-input" type="hidden" name="buildingBuyOrders">
			<div id="building-buy-orders">
				<!-- list is added via JS -->
			</div>
			
			<h2>üí∞ Verkopen</h2>
			
			<h3>Producten</h3>
			<input id="product-sell-orders-input" type="hidden" name="productSellOrders">
			<div id="product-sell-orders">
				<!-- list is added via JS -->
			</div>
			
			<h3>Gebouwen</h3>
			<input id="building-sell-orders-input" type="hidden" name="buildingSellOrders">
			<div id="building-sell-orders">
				<!-- list is added via JS -->
			</div>
			
			<button class="button-1" type="submit">Bevestigen</button>
		</form>
	</div>
	
	<a class="button-back" href="/game/actions">‚Üê Acties</a>
</div>

<div id="create-order-window" class="offcanvas offcanvas-start" data-bs-backdrop="true" data-bs-scroll="false" tabindex="-1">
	<div class="offcanvas-header">
		<h2>üìà Order maken</h2>
		
		<button class="btn-close" type="button" data-bs-dismiss="offcanvas" aria-label="Sluiten"></button>
	</div>
	
	<div class="offcanvas-body">
		<ul id="create-order-section" class="list-compact">
			<li id="type-field" class="list-item-justify">
				<label for="type">Type:</label>
				<select id="type" class="list-select">
					<option value="">-- Kies --</option>
					<option id="buy-option" value="buy">Kopen</option>
					<option id="sell-option" value="sell">Verkopen</option>
				</select>
			</li>
			
			<li id="category-field" class="list-item-justify d-none">
				<label for="category">Categorie:</label>
				<select id="category" class="list-select">
					<option value="">-- Kies --</option>
					<option id="products-option" value="products">Producten</option>
					<option id="buildings-option" value="buildings">Gebouwen</option>
				</select>
			</li>
			
			<li id="item-field" class="list-item-justify d-none">
				<label for="item" id="item-label"><!-- label is added via JS --></label>
				<select id="item" class="list-select">
					<!-- options are added via JS -->
				</select>
			</li>
			
			<li id="quantity-field" class="list-item-justify d-none">
				<label for="quantity">Aantal:</label>
				<input id="quantity" class="list-input-quantity" type="number" min="1" step="1" value="0">
			</li>
			
			<li id="unit-price-field" class="list-item-justify d-none">
				<label for="unit-price" id="unit-price-label"><!-- label is added via JS --></label>
				<input id="unit-price" class="list-input-price" type="number" min="1" step="1" value="0">
			</li>
		</ul>
		
		<div class="container-compact">
			<button id="place-order-button" class="button-2" type="button">Order plaatsen</button>
		</div>
	</div>
</div>

<script src="/js/shared-ui.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
	// Elements
	const ordersConfirmedSection = document.getElementById("orders-confirmed-section");
	const editOrdersButton = document.getElementById("edit-orders-button");
	const ordersOverviewSection = document.getElementById("orders-overview-section");
	const createOrderButton = document.getElementById("create-order-button");
	const form = document.getElementById("game-trade-form");
	const productBuyOrdersInput = document.getElementById("product-buy-orders-input");
	const productSellOrdersInput = document.getElementById("product-sell-orders-input");
	const buildingBuyOrdersInput = document.getElementById("building-buy-orders-input");
	const buildingSellOrdersInput = document.getElementById("building-sell-orders-input");
	const createOrderWindow = document.getElementById("create-order-window");
	const createOrderSection = document.getElementById("create-order-section");
	const typeSelect = document.getElementById("type");
	const buyOption = document.getElementById("buy-option");
	const sellOption = document.getElementById("sell-option");
	const categoryField = document.getElementById("category-field");
	const categorySelect = document.getElementById("category");
	const productsOption = document.getElementById("products-option");
	const buildingsOption = document.getElementById("buildings-option");
	const itemField = document.getElementById("item-field");
	const itemLabel = document.getElementById("item-label");
	const itemSelect = document.getElementById("item");
	const quantityField = document.getElementById("quantity-field");
	const quantityInput = document.getElementById("quantity");
	const unitPriceField = document.getElementById("unit-price-field");
	const unitPriceLabel = document.getElementById("unit-price-label");
	const unitPriceInput = document.getElementById("unit-price");
	const placeOrderButton = document.getElementById("place-order-button");
	
	// Event listeners
	editOrdersButton.addEventListener("click", editOrders);
	createOrderButton.addEventListener("click", createOrder);
	form.addEventListener("submit", confirmOrders);
	typeSelect.addEventListener("change", changeType);
	categorySelect.addEventListener("change", changeCategory);
	itemSelect.addEventListener("change", changeItem);
	quantityInput.addEventListener("input", validateInputs);
	unitPriceInput.addEventListener("input", validateInputs);
	placeOrderButton.addEventListener("click", placeOrder);
	
	// Other variables
	let bsOffcanvas = bootstrap.Offcanvas.getInstance(createOrderWindow);
	if (!bsOffcanvas) {
		bsOffcanvas = new bootstrap.Offcanvas(createOrderWindow);
	}

	const productBuyOrders = {{{json product_buy_orders}}};
	const productSellOrders = {{{json product_sell_orders}}};
	const buildingBuyOrders = {{{json building_buy_orders}}};
	const buildingSellOrders = {{{json building_sell_orders}}};

	const buyableProducts = {{{json buyable_products}}};
	const sellableProducts = {{{json sellable_products}}};
	const buyableBuildings = {{{json buyable_buildings}}};
	const sellableBuildings = {{{json sellable_buildings}}};
	
	const orderMap = {
		"products": {
			"buy": {
				list: productBuyOrders,
				availableItems: buyableProducts,
				elementId: "product-buy-orders",
				typeText: "koop",
				categoryText: "producten",
				limitText: "hoogstens",
				nextOrderId: productBuyOrders.length + 1
			},
			"sell": {
				list: productSellOrders,
				availableItems: sellableProducts,
				elementId: "product-sell-orders",
				typeText: "verkoop",
				categoryText: "producten",
				limitText: "minstens",
				nextOrderId: productSellOrders.length + 1
			}
		},
		"buildings": {
			"buy": {
				list: buildingBuyOrders,
				availableItems: buyableBuildings,
				elementId: "building-buy-orders",
				typeText: "koop",
				categoryText: "gebouwen",
				limitText: "hoogstens",
				nextOrderId: buildingBuyOrders.length + 1
			},
			"sell": {
				list: buildingSellOrders,
				availableItems: sellableBuildings,
				elementId: "building-sell-orders",
				typeText: "verkoop",
				categoryText: "gebouwen",
				limitText: "minstens",
				nextOrderId: buildingSellOrders.length + 1
			}
		}
	};

	enrichOrders(orderMap);	
	
	// Event handlers
	function editOrders() {
		ordersConfirmedSection.classList.add("d-none");
		ordersOverviewSection.classList.remove("d-none");
	};
	//----------------------------------------
	function createOrder() {
		typeSelect.value = "";
		typeSelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function confirmOrders() {
		productBuyOrdersInput.value = JSON.stringify(productBuyOrders);
		productSellOrdersInput.value = JSON.stringify(productSellOrders);
		buildingBuyOrdersInput.value = JSON.stringify(buildingBuyOrders);
		buildingSellOrdersInput.value = JSON.stringify(buildingSellOrders);
	};
	//----------------------------------------
	function changeType() {
		categorySelect.value = "";
		
		const type = typeSelect.value;
		if (type === "") {
			categoryField.classList.add("d-none");
		} else {
			categoryField.classList.remove("d-none");
		}
		
		categorySelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function changeCategory() {
		itemSelect.innerHTML = `<option value="">-- Kies --</option>`;
		itemSelect.value = "";
		
		const category = categorySelect.value;
		if (category === "") {
			itemField.classList.add("d-none");
		} else {
			const labelText = category === "products" ? 
							  "Product" : 
							  "Gebouw";
			itemLabel.textContent = labelText + ":";
			
			const type = typeSelect.value;
			const options = orderMap[category][type].availableItems;
			options.forEach(item => {
				if (item.show) {
					const option = document.createElement("option");
					option.value = item.id;
					option.textContent = item.name;
					itemSelect.appendChild(option);
				}
			});
			
			itemField.classList.remove("d-none");
		}
		
		itemSelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function changeItem() {
		quantityInput.value = 0;
		unitPriceInput.value = 0;
		
		const item = itemSelect.value;
		if (item === "") {
			quantityField.classList.add("d-none");
			unitPriceField.classList.add("d-none");
		} else {
			const type = typeSelect.value;
			unitPriceLabel.textContent = type === "buy" ?
										 "Maximale eenheidsprijs:" :
										 "Minimale eenheidsprijs:";
			
			quantityField.classList.remove("d-none");
			unitPriceField.classList.remove("d-none");
		}
		
		placeOrderButton.disabled = true;
	};
	//----------------------------------------
	function validateInputs() {
		const quantityValue = quantityInput.value.trim();
		const unitPriceValue = unitPriceInput.value.trim();

		const isQuantityValid = /^[1-9]\d*$/.test(quantityValue);
		const isUnitPriceValid = /^[1-9]\d*$/.test(unitPriceValue);

		placeOrderButton.disabled = !(isQuantityValid && isUnitPriceValid);
	}
	//----------------------------------------
	function placeOrder() {
		const type = typeSelect.value;
		const category = categorySelect.value;

		const config = orderMap[category][type];
		
		const itemId = Number(itemSelect.value);
		
		const buyItems = orderMap[category]["buy"].availableItems;
		const sellItems = orderMap[category]["sell"].availableItems;
		
		const buyRef = setItemVisibility(buyItems, itemId, false);
		const sellRef = setItemVisibility(sellItems, itemId, false);
		
		const order = {
			orderId: config.nextOrderId,
			itemId,
			name: itemSelect.options[itemSelect.selectedIndex].textContent,
			quantity: quantityInput.valueAsNumber,
			unitPrice: unitPriceInput.valueAsNumber,
			buyRef,
			sellRef
		};
		config.list.push(order);
		config.nextOrderId++;
		
		typeSelect.value = "";
		typeSelect.dispatchEvent(new Event("change"));
		
		updateOrderDisplay(config);
		updateOrderButtonsVisibility();
		
		bsOffcanvas.hide();
	}

	// Helper functions
	function updateOrderDisplay(config) {
		const div = document.getElementById(config.elementId);
		div.innerHTML = "";

		if (config.list.length === 0) {
			const p = document.createElement("p");
			p.textContent = `Je hebt geen ${config.typeText}orders voor ${config.categoryText} geplaatst.`;
			div.appendChild(p);
			return;
		}
		
		const formatter = new Intl.NumberFormat('nl-NL');
		const ul = document.createElement("ul");
		ul.classList.add("list-compact");
		
		config.list.forEach(order => {
			const pieces = order.quantity === 1 ? "stuk" : "stuks";
			const formattedUnitPrice = formatter.format(order.unitPrice);
			
			const li = document.createElement("li");
			li.classList.add("list-item-justify");
			
			const text = document.createElement("span");
			text.append(
				`${order.name}:`,
				document.createElement("br"),
				`${order.quantity} ${pieces} aan ${config.limitText} ${formattedUnitPrice} `,
				createCurrencySymbol(),
				"/stuk"
			);
			
			const deleteBtn = document.createElement("button");
			deleteBtn.classList.add("btn-close");
			deleteBtn.type = "button";
			deleteBtn.addEventListener("click", () => {
				li.remove();
				
				const index = config.list.findIndex(o => o.orderId === order.orderId);
				if (index !== -1) config.list.splice(index, 1);
				
				if (order.buyRef) order.buyRef.show = true;
				if (order.sellRef) order.sellRef.show = true;
				
				updateOrderDisplay(config);
				updateOrderButtonsVisibility();
			});
			
			li.append(
				text,
				deleteBtn
			);
			ul.appendChild(li);
		});
		div.appendChild(ul);
	}
	//----------------------------------------
	function updateOrderButtonsVisibility() {
		const canBuy = buyableProducts.length > 0 || buyableBuildings.length > 0;
		const canSell = sellableProducts.length > 0 || sellableBuildings.length > 0;

		if (canBuy || canSell) {
		  createOrderButton.classList.remove("d-none");
		} else {
		  createOrderButton.classList.add("d-none");
		}

		if (canSell) {
		  sellOption.classList.remove("d-none");
		} else {
		  sellOption.classList.add("d-none");
		}

		if (canBuy) {
		  buyOption.classList.remove("d-none");
		} else {
		  buyOption.classList.add("d-none");
		}
	}
	//----------------------------------------
	function addShowFlag(items) {
		return items.map(item => ({
			...item,
			show: true
		}));
	}
	//----------------------------------------
	function enrichOrders(orderMap) {
		const categories = ["products", "buildings"];
		const types = ["buy", "sell"];

		categories.forEach(category => {
			types.forEach(type => {
				const items = orderMap[category][type].availableItems;
				orderMap[category][type].availableItems = addShowFlag(items);
			});
		});

		categories.forEach(category => {
			const buyItems = orderMap[category]["buy"].availableItems;
			const sellItems = orderMap[category]["sell"].availableItems;

			types.forEach(type => {
				const config = orderMap[category][type];

				config.list = config.list.map((order, index) => {
					const buyRef = setItemVisibility(buyItems, order.itemId, true);
					const sellRef = setItemVisibility(sellItems, order.itemId, true);

					return {
						...order,
						orderId: index + 1,
						buyRef,
						sellRef
					};
				});

				config.nextOrderId = config.list.length + 1;
			});
		});
	}
	//----------------------------------------
	function setItemVisibility(list, itemId, visible) {
		const ref = list.find(item => item.id === itemId);
		if (ref) ref.show = visible;
		return ref;
	}

	// Execute when DOM content is loaded
	updateOrderDisplay(orderMap["products"]["buy"]);
	updateOrderDisplay(orderMap["products"]["sell"]);
	updateOrderDisplay(orderMap["buildings"]["buy"]);
	updateOrderDisplay(orderMap["buildings"]["sell"]);
	updateOrderButtonsVisibility();
});
</script>