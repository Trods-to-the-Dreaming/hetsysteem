{{#block "title"}}Handel drijven{{/block}}

<div class="container-compact">
	<h1>Handel drijven</h1>
	
	<div id="orders-confirmed-section" {{#unless has_orders}}class="d-none"{{/unless}}>
		<p class="success">Uw orders zijn bevestigd.</p>
		
		<button id="edit-orders-button" type="button" class="button-1">Wijzigen</button>
	</div>
	
	<div id="orders-overview-section" {{#if has_orders}}class="d-none"{{/if}}>
		<button id="create-order-button" class="button-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#create-order-window">
			Order maken
		</button>
		
		<form id="game-trade-form" method="POST" action="/game/actions/trade">
			<h2>üõí Kopen</h2>
			
			<h3>Producten</h3>
			<input id="product-buy-orders-input" type="hidden" name="productBuyOrders">
			<div id="product-buy-orders">
				<!-- list is added via JS -->
			</div>
			
			<h3>Gebouwen</h3>
			<input id="building-buy-orders-input" type="hidden" name="buildingBuyOrders">
			<div id="building-buy-orders">
				<!-- list is added via JS -->
			</div>
			
			<h2>üí∞ Verkopen</h2>
			
			<h3>Producten</h3>
			<input id="product-sell-orders-input" type="hidden" name="productSellOrders">
			<div id="product-sell-orders">
				<!-- list is added via JS -->
			</div>
			
			<h3>Gebouwen</h3>
			<input id="building-sell-orders-input" type="hidden" name="buildingSellOrders">
			<div id="building-sell-orders">
				<!-- list is added via JS -->
			</div>
			
			<button class="button-1" type="submit">Bevestigen</button>
		</form>
	</div>
	
	<a class="button-back" href="/game/actions">‚Üê Acties</a>
</div>

<div id="create-order-window" class="offcanvas offcanvas-start" data-bs-backdrop="true" data-bs-scroll="false" tabindex="-1">
	<div class="offcanvas-header">
		<h2>üìà Order maken</h2>
		
		<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Sluiten"></button>
	</div>
	
	<div class="offcanvas-body">
		<ul id="create-order-section" class="list-compact">
			<li id="type-field" class="list-item-justify">
				<label for="type">Type:</label>
				<select id="type" class="list-select">
					<option value="">-- Kies --</option>
					<option value="buy">Kopen</option>
					<!-- option "sell" is added via JS -->
				</select>
			</li>
			
			<li id="category-field" class="list-item-justify d-none">
				<label for="category">Categorie:</label>
				<select id="category" class="list-select">
					<!-- options are added via JS -->
				</select>
			</li>
			
			<li id="item-field" class="list-item-justify d-none">
				<label for="item" id="item-label"><!-- label is added via JS --></label>
				<select id="item" class="list-select">
					<!-- options are added via JS -->
				</select>
			</li>
			
			<li id="quantity-field" class="list-item-justify d-none">
				<label for="quantity">Aantal:</label>
				<input id="quantity" class="list-input-quantity" type="number" min="1" step="1" value="0">
			</li>
			
			<li id="unit-price-field" class="list-item-justify d-none">
				<label for="unit-price" id="unit-price-label"><!-- label is added via JS --></label>
				<input id="unit-price" class="list-input-price" type="number" min="1" step="1" value="0">
			</li>
		</ul>
		
		<div class="container-compact">
			<button id="place-order-button" class="button-2" type="button">Order plaatsen</button>
		</div>
	</div>
</div>

<script src="/js/shared-ui.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
	// Elements
	const ordersConfirmedSection = document.getElementById("orders-confirmed-section");
	const editOrdersButton = document.getElementById("edit-orders-button");
	const ordersOverviewSection = document.getElementById("orders-overview-section");
	const createOrderButton = document.getElementById("create-order-button");
	const form = document.getElementById("game-trade-form");
	const productBuyOrdersInput = document.getElementById("product-buy-orders-input");
	const productSellOrdersInput = document.getElementById("product-sell-orders-input");
	const buildingBuyOrdersInput = document.getElementById("building-buy-orders-input");
	const buildingSellOrdersInput = document.getElementById("building-sell-orders-input");
	const createOrderWindow = document.getElementById("create-order-window");
	const createOrderSection = document.getElementById("create-order-section");
	const typeSelect = document.getElementById("type");
	const categoryField = document.getElementById("category-field");
	const categorySelect = document.getElementById("category");
	const itemField = document.getElementById("item-field");
	const itemLabel = document.getElementById("item-label");
	const itemSelect = document.getElementById("item");
	const quantityField = document.getElementById("quantity-field");
	const quantityInput = document.getElementById("quantity");
	const unitPriceField = document.getElementById("unit-price-field");
	const unitPriceLabel = document.getElementById("unit-price-label");
	const unitPriceInput = document.getElementById("unit-price");
	const placeOrderButton = document.getElementById("place-order-button");
	
	// Event listeners
	editOrdersButton.addEventListener("click", editOrders);
	createOrderButton.addEventListener("click", createOrder);
	form.addEventListener("submit", confirmOrders);
	typeSelect.addEventListener("change", changeType);
	categorySelect.addEventListener("change", changeCategory);
	itemSelect.addEventListener("change", changeItem);
	quantityInput.addEventListener("input", validateInputs);
	unitPriceInput.addEventListener("input", validateInputs);
	placeOrderButton.addEventListener("click", placeOrder);
	
	// Other variables
	let bsOffcanvas = bootstrap.Offcanvas.getInstance(createOrderWindow);
	if (!bsOffcanvas) {
		bsOffcanvas = new bootstrap.Offcanvas(createOrderWindow);
	}

	const productBuyOrders = {{{json product_buy_orders}}};
	const productSellOrders = {{{json product_sell_orders}}};
	const buildingBuyOrders = {{{json building_buy_orders}}};
	const buildingSellOrders = {{{json building_sell_orders}}};

	const buyableProducts = {{{json buyable_products}}};
	const sellableProducts = {{{json sellable_products}}};
	const buyableBuildings = {{{json buyable_buildings}}};
	const sellableBuildings = {{{json sellable_buildings}}};
	
	const orderMap = {
		"buy-products": {	list: productBuyOrders,
							id: "product-buy-orders",
							type: "koop",
							category: "producten",
							limit: "hoogstens",
							nextOrderId: productBuyOrders.length + 1 },
		"sell-products": { 	list: productSellOrders,
							id: "product-sell-orders",
							type: "verkoop",
							category: "producten",
							limit: "minstens",
							nextOrderId: productSellOrders.length + 1 },
		"buy-buildings": { 	list: buildingBuyOrders,
							id: "building-buy-orders",
							type: "koop",
							category: "gebouwen",
							limit: "hoogstens",
							nextOrderId: buildingBuyOrders.length + 1 },
		"sell-buildings": {	list: buildingSellOrders,
							id: "building-sell-orders",
							type: "verkoop",
							category: "gebouwen",
							limit: "minstens",
							nextOrderId: buildingSellOrders.length + 1 },
	};

	// Add sell option only if the player has something to sell
	if (sellableProducts.length > 0 || sellableBuildings.length > 0) {
		const sellOption = document.createElement("option");
		sellOption.value = "sell";
		sellOption.textContent = "Verkopen";
		typeSelect.appendChild(sellOption);
	}
	
	// Event handlers
	function editOrders() {
		ordersConfirmedSection.classList.add("d-none");
		ordersOverviewSection.classList.remove("d-none");
	};
	//----------------------------------------
	function createOrder() {
		validateInputs();
	};
	//----------------------------------------
	function confirmOrders() {
		productBuyOrdersInput.value = JSON.stringify(productBuyOrders);
		productSellOrdersInput.value = JSON.stringify(productSellOrders);
		buildingBuyOrdersInput.value = JSON.stringify(buildingBuyOrders);
		buildingSellOrdersInput.value = JSON.stringify(buildingSellOrders);
	};
	//----------------------------------------
	function changeType() {
		const selectedType = typeSelect.value;

		// Reset category
		categoryField.classList.add("d-none");
		categorySelect.innerHTML = "";
		categorySelect.dispatchEvent(new Event("change"));
		
		// Hide category when no type is selected
		if (selectedType === "") return;

		// Create category options
		categorySelect.innerHTML = `<option value="">-- Kies --</option>`;
		if (selectedType === "buy" || sellableProducts.length > 0) {
			categorySelect.innerHTML += `<option value="products">Producten</option>`;
		}
		if (selectedType === "buy" || sellableBuildings.length > 0) {
			categorySelect.innerHTML += `<option value="buildings">Gebouwen</option>`;
		}

		// Make category visible
		categoryField.classList.remove("d-none");
		categorySelect.value = "";
		categorySelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function changeCategory() {
		const selectedType = typeSelect.value;
		const selectedCategory = categorySelect.value;
		
		// Reset item
		itemField.classList.add("d-none");
		itemSelect.innerHTML = "";
		itemSelect.dispatchEvent(new Event("change"));
		
		// Hide item when no category is selected
		if (selectedCategory  === "") return;

		// Create item label and options
		let labelText = "";
		let options = [];
		if (selectedCategory === "products") {
			labelText = "Product";
			options = selectedType === "buy" ? buyableProducts : sellableProducts;
		} else if (selectedCategory === "buildings") {
			labelText = "Gebouw";
			options = selectedType === "buy" ? buyableBuildings : sellableBuildings;
		}
		itemLabel.textContent = labelText + ":";
		itemSelect.innerHTML = `<option value="">-- Kies --</option>`;
		options.forEach(item => {
			const option = document.createElement("option");
			option.value = item.id;
			option.textContent = item.name;
			itemSelect.appendChild(option);
		});

		// Make item visible
		itemField.classList.remove("d-none");
	};
	//----------------------------------------
	function changeItem() {
		const selectedType = typeSelect.value;
		const selectedCategory = categorySelect.value;
		const selectedItem = itemSelect.value;
		
		// Reset quantity and unit price
		quantityField.classList.add("d-none");
		quantityInput.value = 0;
		unitPriceField.classList.add("d-none");
		unitPriceInput.value = 0;
		placeOrderButton.disabled = true;
		
		// Hide quantity and unit price when no item is selected
		if (selectedItem  === "") return;

		// Create unit price label
		if (selectedType === "buy") {
			unitPriceLabel.textContent = "Maximale eenheidsprijs:";
		} else if (selectedType === "sell") {
			unitPriceLabel.textContent = "Minimale eenheidsprijs:";
		}

		// Make quantity and unit price visible
		quantityField.classList.remove("d-none");
		unitPriceField.classList.remove("d-none");
		validateInputs();
	};
	//----------------------------------------
	function validateInputs() {
		const quantityValue = quantityInput.value.trim();
		const unitPriceValue = unitPriceInput.value.trim();

		const isQuantityValid = /^[1-9]\d*$/.test(quantityValue);
		const isUnitPriceValid = /^[1-9]\d*$/.test(unitPriceValue);

		placeOrderButton.disabled = !(isQuantityValid && isUnitPriceValid);
	}
	//----------------------------------------
	function placeOrder() {
		const type = typeSelect.value;
		const category = categorySelect.value;

		const config = orderMap[`${type}-${category}`];
		const order = {
			orderId: config.nextOrderId,
			itemId: itemSelect.value,
			name: itemSelect.options[itemSelect.selectedIndex].textContent,
			quantity: quantityInput.valueAsNumber,
			unitPrice: unitPriceInput.valueAsNumber
		};
		config.list.push(order);
		config.nextOrderId++;
		
		typeSelect.value = "";
		typeSelect.dispatchEvent(new Event("change"));
		
		updateOrderDisplay(config);
		
		bsOffcanvas.hide();

		/*// Verwijder item uit bronlijsten
		removeItemFromList(buyableProducts, item.id);
		removeItemFromList(sellableProducts, item.id);
		removeItemFromList(buyableBuildings, item.id);
		removeItemFromList(sellableBuildings, item.id);

		// Reset formulier
		typeSelect.value = "";
		categorySelect.innerHTML = "";
		itemSelect.innerHTML = "";
		categoryField.classList.add("d-none");
		itemField.classList.add("d-none");
		quantityField.classList.add("d-none");
		unitPriceField.classList.add("d-none");
		placeOrderButton.disabled = true;

		updateOrderDisplay();*/
	}

	// Helper functions
	function updateOrderDisplay(config) {
		const div = document.getElementById(config.id);
		div.innerHTML = "";

		if (config.list.length === 0) {
			const p = document.createElement("p");
			p.textContent = `Je hebt geen ${config.type}orders voor ${config.category} geplaatst.`;
			div.appendChild(p);
			return;
		}
		
		const formatter = new Intl.NumberFormat('nl-NL');
		const ul = document.createElement("ul");
		ul.classList.add("list-compact");
		config.list.forEach(order => {
			const pieces = order.quantity === 1 ? "stuk" : "stuks";
			const formattedUnitPrice = formatter.format(order.unitPrice);
			
			const li = document.createElement("li");
			li.classList.add("list-item-justify");
			
			const text = document.createElement("span");
			text.append(
				`${order.name}:`,
				document.createElement("br"),
				`${order.quantity} ${pieces} aan ${config.limit} ${formattedUnitPrice} `,
				createCurrencySymbol(),
				"/stuk"
			);
			
			const deleteBtn = document.createElement("button");
			deleteBtn.classList.add("btn-close");
			deleteBtn.type = "button";
			deleteBtn.addEventListener("click", () => {
				li.remove();
				config.list = config.list.filter(o => o.orderId !== order.orderId);
			});
			
			li.append(
				text,
				deleteBtn
			);
			ul.appendChild(li);
		});
		div.appendChild(ul);
	}

	updateOrderDisplay(orderMap["buy-products"]);
	updateOrderDisplay(orderMap["sell-products"]);
	updateOrderDisplay(orderMap["buy-buildings"]);
	updateOrderDisplay(orderMap["sell-buildings"]);
});
</script>