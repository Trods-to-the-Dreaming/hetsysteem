{{#block "title"}}Gebouwen beheren{{/block}}

{{#block "headScripts"}}
<script src="/js/turn.js"></script>
<script>
	window.step.index = 1;
	window.step.checkAccess();
</script>
{{/block}}

<div id="container-div" class="container-compact d-none">
	<h1>Gebouwen beheren</h1>
	
	<!--div id="demolish-div">
		<h2>üí• Slopen</h2>
		
		<ul id="owned-buildings-ul" class="list-compact">
			<!-- Filled bij JS ->
		</ul>
	</div>
	
	<div id="build-div">
		<h2>üèóÔ∏è Bouwen</h2>
		
		<p>Vrije landtegels: <span id="free-tiles-span"></span></p> <!-- neemt toe als een gebouw wordt gesloopt ->

		<ul id="construction-sites-ul" class="list-compact">
			<!-- Filled bij JS -->
		</ul>
		
		<!-- hier een lijst van geplande gebouwen en een knop, een lijst van gebouwtypes en een lijst van gebouwgroottes? ->
	</div>

	<button id="next-button" class="btn btn-primary">Volgende</button>
	
	<a class="button-back" href="/game">‚Üê Spelmenu</a-->
</div>

<script>
//--- Load and save fields ----------------------------------------------------------------------//
window.step.loadFields = function() {
	const allJobs = (JSON.parse(localStorage.getItem(`turn.allJobs`))).options;
	const allRecreations = (JSON.parse(localStorage.getItem(`turn.allRecreations`))).options;
	
	window.step.fields = {
		firstName: document.getElementById('first-name-input'),
		lastName: document.getElementById('last-name-input'),
		jobPreference1: document.getElementById('job-preference-1-select'),
		jobPreference2: document.getElementById('job-preference-2-select'),
		jobPreference3: document.getElementById('job-preference-3-select'),
		recreationPreference: document.getElementById('recreation-preference-select')
	};
	
	const fields = window.step.fields;
	const data = window.step.data;
	
	window.step.populateSelect(fields.jobPreference1, allJobs);
	window.step.populateSelect(fields.jobPreference2, allJobs);
	window.step.populateSelect(fields.jobPreference3, allJobs);
	window.step.populateSelect(fields.recreationPreference, allRecreations);
	
	fields.firstName.value = data.firstName;
	fields.lastName.value = data.lastName;
	fields.jobPreference1.value = data.jobPreference1;
	fields.jobPreference2.value = data.jobPreference2;	
	fields.jobPreference3.value = data.jobPreference3;
	fields.recreationPreference.value = data.recreationPreference;
	
	fields.firstName.addEventListener('input', handleFirstNameInput);
	fields.lastName.addEventListener('input', handleLastNameInput);
	fields.jobPreference1.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference2.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference3.addEventListener('change', handleJobPreferenceChange);
	fields.recreationPreference.addEventListener('change', handleRecreationPreferenceChange);
}

window.step.saveFields = function() {
	const fields = window.step.fields;
	const data = window.step.data;
	
	data.firstName = fields.firstName.value;
	data.lastName = fields.lastName.value;
	data.jobPreference1 = fields.jobPreference1.value;
	data.jobPreference2 = fields.jobPreference2.value;	
	data.jobPreference3 = fields.jobPreference3.value;
	data.recreationPreference = fields.recreationPreference.value;
}

/*function initUI() {
	const ownedBuildingsUl = document.getElementById('owned-buildings-ul');
	ownedBuildings.forEach((building) => {
		const li = document.createElement('li');
		li.className = '.list-item-justify';

		const span = document.createElement('span');
		span.textContent = building.name;
		
		const button = document.createElement('button');
		button.addEventListener('click', () => toggleDemolish(building, span, button));
		
		if (building.isDemolished) {
			span.classList.add('demolished');
			button.textContent = 'Behouden';
		} else {
			span.classList.remove('demolished');
			button.textContent = 'Slopen';
		}
		
		li.appendChild(span);
		li.appendChild(button);
		ownedBuildingsUl.appendChild(li);
	});
	
	const freeTilesSpan = document.getElementById('free-tiles-span');
	freeTilesSpan.textContent = nFreeTiles;
	
	const constructionSitesUl = document.getElementById('construction-sites-ul');
	constructionSites.forEach((site) => {
		const li = document.createElement('li');
		li.className = '.list-item-justify';

		const span = document.createElement('span');
		span.textContent = site.name;
		
		const button = document.createElement('button');
		button.addEventListener('click', () => clickCancelConstruction(site, li));
		
		li.appendChild(span);
		li.appendChild(button);
		constructionSitesUl.appendChild(li);
	});
	
	validate();
}

function toggleDemolish(building, span, button) {
	building.isDemolished = !building.isDemolished;

	if (building.isDemolished) {
		span.classList.add('demolished');
		button.textContent = 'Behouden';
		nFreeTiles += building.size * building.tile_size;
	} else {
		span.classList.remove('demolished');
		button.textContent = 'Slopen';
		nFreeTiles -= building.size * building.tile_size;
	}

	validate();
}

function clickCancelConstruction(site, li) {
	li.remove();
	nFreeTiles += site.size * site.tile_size;
	
	validate();
}

// some function for constructing a new building?

function validate() {
	const nextButton = document.getElementById('next-button');
	nextButton.disabled = nFreeTiles < 0 ? true : false;
}

function clickNext() {
	// window.location.href = ...;
}*/
window.turn.saveData = function() {
	//const data = [];
	//localStorage.setItem('data', JSON.stringify(data));
	alert('saving data...');
}

window.turn.loadData = function() {
	//const data = [];
	alert('loading data...');
}

//--- DOM content loaded ------------------------------------------------------------------------//
document.addEventListener('DOMContentLoaded', () => {
	window.step.initialize();
});
</script>