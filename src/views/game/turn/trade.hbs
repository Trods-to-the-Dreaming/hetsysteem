{{#block "title"}}Handel drijven{{/block}}

<div class="container-compact">
	<h1>Handel drijven</h1>
	
	<div id="confirmed-section" {{#unless has_confirmed}}class="d-none"{{/unless}}>
		<p class="success">Uw orders zijn bevestigd.</p>
		
		<button id="edit-button" type="button" class="button-1">Wijzigen</button>
	</div>
	
	<div id="overview-section" {{#if has_confirmed}}class="d-none"{{/if}}>
		<button id="create-order-button" class="button-2" type="button" 
				data-bs-toggle="offcanvas" data-bs-target="#create-order-window">
			Order maken
		</button>
		
		<form id="trade-form" method="POST" action="/game/actions/trade">
			<h2>üõí Kopen</h2>
			
			<h3>Producten</h3>
			<input id="product-buy-orders-input" type="hidden" name="productBuyOrders">
			<p id="no-product-buy-orders">Je hebt geen kooporders voor producten geplaatst.</p>
			<ul id="product-buy-orders-list" class="list-compact d-none">
				<!-- options are added via script -->
			</ul>
			
			<h3>Gebouwen</h3>
			<input id="building-buy-orders-input" type="hidden" name="buildingBuyOrders">
			<p id="no-building-buy-orders">Je hebt geen kooporders voor gebouwen geplaatst.</p>
			<ul id="building-buy-orders-list" class="list-compact d-none">
				<!-- options are added via script -->
			</ul>
			
			<h2>üí∞ Verkopen</h2>
			
			<h3>Producten</h3>
			<input id="product-sell-orders-input" type="hidden" name="productSellOrders">
			<p id="no-product-sell-orders">Je hebt geen verkooporders voor producten geplaatst.</p>
			<ul id="product-sell-orders-list" class="list-compact d-none">
				<!-- options are added via script -->
			</ul>
			
			<h3>Gebouwen</h3>
			<input id="building-sell-orders-input" type="hidden" name="buildingSellOrders">
			<p id="no-building-sell-orders">Je hebt geen verkooporders voor gebouwen geplaatst.</p>
			<ul id="building-sell-orders-list" class="list-compact d-none">
				<!-- options are added via script -->
			</ul>
			
			<button class="button-1" type="submit">Bevestigen</button>
		</form>
	</div>
	
	<a class="button-back" href="/game/actions">‚Üê Acties</a>
</div>

<div id="create-order-window" class="offcanvas offcanvas-start" data-bs-backdrop="true" data-bs-scroll="false" tabindex="-1">
	<div class="offcanvas-header">
		<h2>üìà Order maken</h2>
		
		<button class="btn-close" type="button" data-bs-dismiss="offcanvas" aria-label="Sluiten"></button>
	</div>
	
	<div class="offcanvas-body">
		<ul id="create-order-section" class="list-compact">
			<li id="type-field" class="list-item-justify">
				<label for="type">Type:</label>
				<select id="type" class="list-select">
					<option value="">-- Kies --</option>
					<option id="buy-option" value="buy">Koop</option>
					<option id="sell-option" value="sell">Verkoop</option>
				</select>
			</li>
			
			<li id="category-field" class="list-item-justify d-none">
				<label for="category">Categorie:</label>
				<select id="category" class="list-select">
					<option value="">-- Kies --</option>
					<option id="product-option" value="product">Product</option>
					<option id="building-option" value="building">Gebouw</option>
				</select>
			</li>
			
			<li id="item-field" class="list-item-justify d-none">
				<label for="item" id="item-label"><!-- label is added via script --></label>
				<select id="item" class="list-select">
					<!-- options are added via script -->
				</select>
			</li>
			
			<li id="quantity-field" class="list-item-justify d-none">
				<label for="quantity">Aantal:</label>
				<input id="quantity" class="list-input-quantity" type="number" min="1" step="1" value="0">
			</li>
			
			<li id="unit-price-field" class="list-item-justify d-none">
				<label for="unit-price" id="unit-price-label"><!-- label is added via script --></label>
				<input id="unit-price" class="list-input-price" type="number" min="1" step="1" value="0">
			</li>
		</ul>
		
		<div class="container-compact">
			<button id="place-order-button" class="button-2" type="button">Order plaatsen</button>
		</div>
	</div>
</div>

<script src="/js/shared-ui.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
	// Elements
	const confirmedSection = document.getElementById("confirmed-section");
	const editButton = document.getElementById("edit-button");
	const overviewSection = document.getElementById("overview-section");
	const createOrderButton = document.getElementById("create-order-button");
	const form = document.getElementById("trade-form");
	const productBuyOrdersInput = document.getElementById("product-buy-orders-input");
	const productSellOrdersInput = document.getElementById("product-sell-orders-input");
	const buildingBuyOrdersInput = document.getElementById("building-buy-orders-input");
	const buildingSellOrdersInput = document.getElementById("building-sell-orders-input");
	const createOrderWindow = document.getElementById("create-order-window");
	const createOrderSection = document.getElementById("create-order-section");
	const typeSelect = document.getElementById("type");
	const buyOption = document.getElementById("buy-option");
	const sellOption = document.getElementById("sell-option");
	const categoryField = document.getElementById("category-field");
	const categorySelect = document.getElementById("category");
	const productsOption = document.getElementById("product-option");
	const buildingsOption = document.getElementById("building-option");
	const itemField = document.getElementById("item-field");
	const itemLabel = document.getElementById("item-label");
	const itemSelect = document.getElementById("item");
	const quantityField = document.getElementById("quantity-field");
	const quantityInput = document.getElementById("quantity");
	const unitPriceField = document.getElementById("unit-price-field");
	const unitPriceLabel = document.getElementById("unit-price-label");
	const unitPriceInput = document.getElementById("unit-price");
	const placeOrderButton = document.getElementById("place-order-button");
	
	// Event listeners
	editButton.addEventListener("click", clickEdit);
	createOrderButton.addEventListener("click", clickCreateOrder);
	form.addEventListener("submit", submitForm);
	typeSelect.addEventListener("change", changeType);
	categorySelect.addEventListener("change", changeCategory);
	itemSelect.addEventListener("change", changeItem);
	quantityInput.addEventListener("input", validateInputs);
	unitPriceInput.addEventListener("input", validateInputs);
	placeOrderButton.addEventListener("click", clickPlaceOrder);
	
	// Classes
	class Order {
		constructor(id, 
					itemId, 
					itemName, 
					quantity, 
					unitPrice, 
					buyOption, 
					sellOption) {
			this.id = id;
			this.itemId = itemId;
			this.itemName = itemName;
			this.quantity = quantity;
			this.unitPrice = unitPrice;
			this.buyOption = buyOption;
			this.sellOption = sellOption;
		}

		getFormattedUnitPrice(locale = "nl-NL") {
			const formatter = new Intl.NumberFormat(locale);
			return formatter.format(this.unitPrice);
		}
	}
	
	class OrderConfig {
		constructor(initialOrders,
					options, 
					elementId) {
			this.orders = [];
			this.initialOrders = initialOrders;
			this.options = options.map(option => ({
				...option, 
				isVisible: true
			}));
			this.elementId = elementId;
			this.nextOrderId = 1;
		}

		addOrder(itemId,
				 itemName,
				 quantity,
				 unitPrice,
				 buyOption,
				 sellOption) {
			const order = new Order(this.nextOrderId++,
									itemId,
									itemName,
									quantity,
									unitPrice,
									buyOption,
									sellOption);
			this.orders.push(order);
			return order;
		}
		
		removeOrder(order) {
			const index = this.orders.findIndex(o => o.id === order.id);
			if (index !== -1) this.orders.splice(index, 1);
		}
		
		showOption(itemId) {
			const option = this.options.find(o => o.itemId === itemId);
			if (option) option.isVisible = true;
			return option;
		}
		
		hideOption(itemId) {
			const option = this.options.find(o => o.itemId === itemId);
			if (option) option.isVisible = false;
			return option;
		}
		
		hasVisibleOptions() {
			return this.options.some(o => o.isVisible);
		}
	}

	// Storage object for the orders
	const orderConfig  = {
		"product": {
			"buy": new OrderConfig({{{json product_buy_orders}}},
								   {{{json buyable_products}}},
								   "product-buy-orders"),
			"sell": new OrderConfig({{{json product_sell_orders}}},
								    {{{json sellable_products}}},
								    "product-sell-orders")
		},
		"building": {
			"buy": new OrderConfig({{{json building_buy_orders}}},
								   {{{json buyable_buildings}}},
								   "building-buy-orders"),
			"sell": new OrderConfig({{{json building_sell_orders}}},
								    {{{json sellable_buildings}}},
								    "building-sell-orders")
		}
	};
	
	// Offcanvas
	let bsOffcanvas = bootstrap.Offcanvas.getInstance(createOrderWindow);
	if (!bsOffcanvas) {
		bsOffcanvas = new bootstrap.Offcanvas(createOrderWindow);
	}
	
	// Executed when the DOM content is loaded
	placeInitialOrders();
	
	// Event handlers
	function clickEdit() {
		confirmedSection.classList.add("d-none");
		overviewSection.classList.remove("d-none");
	};
	//----------------------------------------
	function clickCreateOrder() {
		buyOption.disabled = !canPlaceOrder("buy");
		sellOption.disabled = !canPlaceOrder("sell");
		
		typeSelect.value = "";
		typeSelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function submitForm() {
		productBuyOrdersInput.value = JSON.stringify(orderConfig["product"]["buy"].orders);
		productSellOrdersInput.value = JSON.stringify(orderConfig["product"]["sell"].orders);
		buildingBuyOrdersInput.value = JSON.stringify(orderConfig["building"]["buy"].orders);
		buildingSellOrdersInput.value = JSON.stringify(orderConfig["building"]["sell"].orders);
	};
	//----------------------------------------
	function changeType() {
		categorySelect.value = "";
		
		const type = typeSelect.value;
		if (type === "") {
			categoryField.classList.add("d-none");
		} else {
			productsOption.disabled = !canPlaceOrder(type, "product");
			buildingsOption.disabled = !canPlaceOrder(type, "building");
			
			categoryField.classList.remove("d-none");
		}
		
		categorySelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function changeCategory() {
		itemSelect.innerHTML = `<option value="">-- Kies --</option>`;
		itemSelect.value = "";
		
		const category = categorySelect.value;
		if (category === "") {
			itemField.classList.add("d-none");
		} else {
			const type = typeSelect.value;
			const options = orderConfig[category][type].options;
			
			options.forEach(option => {
				if (option.isVisible) {
					const itemOption = document.createElement("option");
					itemOption.value = option.itemId;
					itemOption.textContent = option.itemName;
					if (type === "sell") {
						itemOption.dataset.max = option.quantity;
					}
					itemSelect.appendChild(itemOption);
				}
			});
			
			const labelText = category === "product" ? 
							  "Product" : 
							  "Gebouw";
			itemLabel.textContent = labelText + ":";
			
			itemField.classList.remove("d-none");
		}
		
		itemSelect.dispatchEvent(new Event("change"));
	};
	//----------------------------------------
	function changeItem() {	
		quantityInput.value = 0;
		unitPriceInput.value = 0;
		
		const item = itemSelect.value;
		if (item === "") {
			quantityField.classList.add("d-none");
			unitPriceField.classList.add("d-none");
		} else {
			const type = typeSelect.value;
			const selectedOption = itemSelect.options[itemSelect.selectedIndex];

			if (selectedOption.dataset.max) {
				quantityInput.max = selectedOption.dataset.max;
			} else {
				quantityInput.removeAttribute("max");
			}
			quantityField.classList.remove("d-none");
			
			unitPriceLabel.textContent = type === "buy" ?
										 "Maximale eenheidsprijs:" :
										 "Minimale eenheidsprijs:";
			
			unitPriceField.classList.remove("d-none");
		}
		
		placeOrderButton.disabled = true;
	};
	//----------------------------------------
	function validateInputs() {
		const quantityValue = quantityInput.valueAsNumber;
		const unitPriceValue = unitPriceInput.valueAsNumber;
		
		const hasMax = quantityInput.max !== "";
		const max = hasMax ? Number(quantityInput.max) : Number.POSITIVE_INFINITY;
		
		const isQuantityValid = Number.isInteger(quantity) && 
								quantity > 0 && 
								quantity <= max;
		const isUnitPriceValid = Number.isInteger(unitPrice) && 
								 unitPrice > 0;

		placeOrderButton.disabled = !(isQuantityValid && isUnitPriceValid);
	}
	//----------------------------------------
	function clickPlaceOrder() {
		const type = typeSelect.value;
		const category = categorySelect.value;
		const itemId = Number(itemSelect.value);
		const itemName = itemSelect.options[itemSelect.selectedIndex].textContent;
		const quantity = quantityInput.valueAsNumber;
		const unitPrice = unitPriceInput.valueAsNumber;
		
		placeOrder(type,
				   category,
				   itemId,
				   itemName,
				   quantity,
				   unitPrice);
		
		bsOffcanvas.hide();
	}
	
	// Helper functions
	function placeOrder(type,
						category,
						itemId,
						itemName,
						quantity,
						unitPrice) {
		// Add order
		const config = orderConfig[category][type];
		
		const configBuy = orderConfig[category]["buy"];
		const configSell = orderConfig[category]["sell"];
		
		const buyOption = configBuy.hideOption(itemId);
		const sellOption = configSell.hideOption(itemId);
		
		const order = config.addOrder(itemId,
									  itemName,
									  quantity,
									  unitPrice,
									  buyOption,
									  sellOption);
		
		// Update page
		const p = document.getElementById("no-" + config.elementId);
		p.classList.add("d-none");
		
		const ul = document.getElementById(config.elementId + "-list");
		ul.classList.remove("d-none");
		
		const li = document.createElement("li");
		li.classList.add("list-item-justify");
		ul.appendChild(li);
		
		const pieces = order.quantity === 1 ? "stuk" : "stuks";
		const minmax = type === "buy" ? "hoogstens" : "minstens";
		const text = document.createElement("span");
		text.append(
			`${order.itemName}:`,
			document.createElement("br"),
			`${order.quantity} ${pieces} aan ${minmax} ${order.getFormattedUnitPrice()} `,
			createCurrencySymbol(),
			"/stuk"
		);
		
		const deleteBtn = document.createElement("button");
		deleteBtn.classList.add("btn-close");
		deleteBtn.type = "button";
		deleteBtn.addEventListener("click", () => {
			// Remove order
			configBuy.showOption(order.itemId);
			configSell.showOption(order.itemId);
			
			config.removeOrder(order);
			
			// Udate page
			li.remove();
			if (ul.children.length === 0) {
				ul.classList.add("d-none");
				p.classList.remove("d-none");
			}
		});
		
		li.append(
			text,
			deleteBtn
		);
		
		placeOrderButton.disabled = !canPlaceOrder();
	}
	//----------------------------------------
	function placeInitialOrders() {
		const categories = ["product", "building"];
		const types = ["buy", "sell"];

		categories.forEach(category => {
			types.forEach(type => {
				const config = orderConfig[category][type];
				config.initialOrders.forEach(order => {
					placeOrder(
						type,
						category,
						order.itemId,
						order.itemName,
						order.quantity,
						order.unitPrice
					);
				});
			});
		});
	}
	//----------------------------------------
	function canPlaceOrder(type = "",
						   category = "") {
		const types = type ? [type] : ["buy", "sell"];
		const categories = category ? [category] : ["product", "building"];

		return types.some(t =>
			categories.some(c =>
				orderConfig[c][t].hasVisibleOptions()
			)
		);
	}
});
</script>