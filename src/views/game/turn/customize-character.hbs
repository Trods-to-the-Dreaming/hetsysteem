{{#block "title"}}Personage aanpassen{{/block}}

{{#block "headScripts"}}
<script type="module">
	import { turn } from '/js/turn-logic.js';
	turn.page.index = 0;
	turn.page.checkAccess();
</script>
{{/block}}

<div id="container-div" class="container-compact d-none">
	<h1>Personage aanpassen</h1>

	<div class="field">
		<label for="first-name-input" class="form-label">Voornaam:</label>
		<input id="first-name-input" class="form-control" type="text" required>
	</div>
	
	<div class="field">
		<label for="last-name-input" class="form-label">Achternaam:</label>
		<input id="last-name-input" class="form-control" type="text" required>
	</div>
	
	<input id="name-input" class="d-none" value="dummytext" required>
	<p id="name-error" class="error"></p>
	
	<div class="field">
		<label for="job-preference-1-select" class="form-label">Jobvoorkeur (★★★):</label>
		<select id="job-preference-1-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="job-preference-2-select" class="form-label">Jobvoorkeur (★★):</label>
		<select id="job-preference-2-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="job-preference-3-select" class="form-label">Jobvoorkeur (★):</label>
		<select id="job-preference-3-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="recreation-preference-select" class="form-label">Ontspanningsvoorkeur (★★★):</label>
		<select id="recreation-preference-select" class="form-select" required></select>
	</div>	
</div>

<script type="module">
import { validateName } from '/js/character-name-validation.js';
import { turn } from '/js/turn-logic.js';

//--- Global variables --------------------------------------------------------------------------//
const debouncedCheckNameAvailability = debounce(checkNameAvailability, 300);

//--- Load and save fields ----------------------------------------------------------------------//
turn.page.loadFields = function() {
	if (!turn.page.data) {
		turn.page.data = {
			firstName: "",
			lastName: "",
			jobPreference1: "",
			jobPreference2: "",	
			jobPreference3: "",
			recreationPreference: ""
		};
	}
	
	turn.page.fields = {
		firstName: document.getElementById('first-name-input'),
		lastName: document.getElementById('last-name-input'),
		jobPreference1: document.getElementById('job-preference-1-select'),
		jobPreference2: document.getElementById('job-preference-2-select'),
		jobPreference3: document.getElementById('job-preference-3-select'),
		recreationPreference: document.getElementById('recreation-preference-select')
	};

	const allJobs = (JSON.parse(localStorage.getItem(`turn.allJobs`))).options;
	const allRecreations = (JSON.parse(localStorage.getItem(`turn.allRecreations`))).options;
	const data = turn.page.data;
	const fields = turn.page.fields;
	
	turn.page.populateSelect(fields.jobPreference1, allJobs);
	turn.page.populateSelect(fields.jobPreference2, allJobs);
	turn.page.populateSelect(fields.jobPreference3, allJobs);
	turn.page.populateSelect(fields.recreationPreference, allRecreations);
	
	fields.firstName.value = data.firstName;
	fields.lastName.value = data.lastName;
	fields.jobPreference1.value = data.jobPreference1;
	fields.jobPreference2.value = data.jobPreference2;	
	fields.jobPreference3.value = data.jobPreference3;
	fields.recreationPreference.value = data.recreationPreference;
	
	fields.firstName.addEventListener('input', handleFirstNameInput);
	fields.lastName.addEventListener('input', handleLastNameInput);
	fields.jobPreference1.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference2.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference3.addEventListener('change', handleJobPreferenceChange);
	fields.recreationPreference.addEventListener('change', handleRecreationPreferenceChange);
	
	handleFirstNameInput();
	handleLastNameInput();
	handleJobPreferenceChange();
	handleRecreationPreferenceChange();
}

turn.page.saveFields = function() {
	const data = turn.page.data;
	const fields = turn.page.fields;
	
	data.firstName = fields.firstName.value;
	data.lastName = fields.lastName.value;
	data.jobPreference1 = fields.jobPreference1.value;
	data.jobPreference2 = fields.jobPreference2.value;	
	data.jobPreference3 = fields.jobPreference3.value;
	data.recreationPreference = fields.recreationPreference.value;
}

//--- Event handlers ----------------------------------------------------------------------------//
function handleFirstNameInput() {
	handleNameInput(turn.page.fields.firstName);
}

function handleLastNameInput() {
	handleNameInput(turn.page.fields.lastName);
}

function handleJobPreferenceChange() {
	const selects = [turn.page.fields.jobPreference1, 
					 turn.page.fields.jobPreference2, 
					 turn.page.fields.jobPreference3];
	const selectedValues = selects.map(select => select.value);
	
	selects.forEach((select, index) => {
		const otherSelectedValues = selectedValues.filter((_, i) => i !== index);
		
		Array.from(select.options).forEach(option => {
			option.disabled = otherSelectedValues.includes(option.value);
		});
	});
	
	turn.page.validate();
}

function handleRecreationPreferenceChange() {
	turn.page.validate();
}

//--- Helpers -----------------------------------------------------------------------------------//
function handleNameInput(nameInput) {
	validateName(nameInput);
	nameInput.reportValidity();
	debouncedCheckNameAvailability();
	turn.page.validate();
}

async function checkNameAvailability() {	
	const nameInput = document.getElementById('name-input');
	const nameError = document.getElementById('name-error');
	nameInput.setCustomValidity('');
	nameError.textContent = '';
	
	const fields = turn.page.fields;
	const firstName = fields.firstName.value;
	const lastName = fields.lastName.value;

	if (!firstName || !lastName) return;

	if (fields.firstName.validity.valid &&
		fields.lastName.validity.valid) {
		try {
			const params = new URLSearchParams({
				firstName,
				lastName,
			});
			const res = await fetch(`/game/turn/check-character-name?${params}`);
			const { available } = await res.json();

			if (!available) {
				const msg = 'Deze naam is al in gebruik.';
				nameInput.setCustomValidity(msg);
				nameError.textContent = msg;
			}
			
			turn.page.validate();
		} catch (err) {
			console.error(err);
		}
	}
}

function debounce(fn, delay) {
	let timeoutId;
	return function(...args) {
		clearTimeout(timeoutId);
		timeoutId = setTimeout(() => fn.apply(this, args), delay);
	};
}

//--- DOM content loaded ------------------------------------------------------------------------//
document.addEventListener('DOMContentLoaded', () => {
	turn.page.initialize();
});
</script>