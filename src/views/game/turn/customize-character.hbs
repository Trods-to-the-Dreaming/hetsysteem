{{#block "title"}}Personage aanpassen{{/block}}

{{#block "headScripts"}}
<script src="/js/turn.js"></script>
<script>
	window.step.index = 0;
	window.step.checkAccess();
</script>
{{/block}}

<div id="container-div" class="container-compact d-none">
	<h1>Personage aanpassen</h1>

	<div class="field">
		<label for="first-name-input" class="form-label">Voornaam:</label>
		<input id="first-name-input" class="form-control" type="text" required>
	</div>
	
	<div class="field">
		<label for="last-name-input" class="form-label">Achternaam:</label>
		<input id="last-name-input" class="form-control" type="text" required>
	</div>
	
	<div class="field">
		<label for="job-preference-1-select" class="form-label">Jobvoorkeur (★★★):</label>
		<select id="job-preference-1-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="job-preference-2-select" class="form-label">Jobvoorkeur (★★):</label>
		<select id="job-preference-2-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="job-preference-3-select" class="form-label">Jobvoorkeur (★):</label>
		<select id="job-preference-3-select" class="form-select" required></select>
	</div>
	
	<div class="field">
		<label for="recreation-preference-select" class="form-label">Ontspanningsvoorkeur (★★★):</label>
		<select id="recreation-preference-select" class="form-select" required></select>
	</div>	
</div>

<script>
//--- Global variables --------------------------------------------------------------------------//
const debouncedCheckNameAvailability = debounce(checkNameAvailability, 300);

//--- Load and save fields ----------------------------------------------------------------------//
window.step.loadFields = function() {
	window.step.fields = {
		firstName: document.getElementById('first-name-input'),
		lastName: document.getElementById('last-name-input'),
		jobPreference1: document.getElementById('job-preference-1-select'),
		jobPreference2: document.getElementById('job-preference-2-select'),
		jobPreference3: document.getElementById('job-preference-3-select'),
		recreationPreference: document.getElementById('recreation-preference-select')
	};
	
	if (!window.step.actions) {
		window.step.actions = {
			firstName: "",
			lastName: "",
			jobPreference1: "",
			jobPreference2: "",	
			jobPreference3: "",
			recreationPreference: ""
		};
	}
	
	const allJobs = (JSON.parse(localStorage.getItem(`turn.allJobs`))).options;
	const allRecreations = (JSON.parse(localStorage.getItem(`turn.allRecreations`))).options;
	const fields = window.step.fields;
	const actions = window.step.actions;
	
	window.step.populateSelect(fields.jobPreference1, allJobs);
	window.step.populateSelect(fields.jobPreference2, allJobs);
	window.step.populateSelect(fields.jobPreference3, allJobs);
	window.step.populateSelect(fields.recreationPreference, allRecreations);
	
	fields.firstName.value = actions.firstName;
	fields.lastName.value = actions.lastName;
	fields.jobPreference1.value = actions.jobPreference1;
	fields.jobPreference2.value = actions.jobPreference2;	
	fields.jobPreference3.value = actions.jobPreference3;
	fields.recreationPreference.value = actions.recreationPreference;
	
	fields.firstName.addEventListener('input', handleFirstNameInput);
	fields.lastName.addEventListener('input', handleLastNameInput);
	fields.jobPreference1.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference2.addEventListener('change', handleJobPreferenceChange);
	fields.jobPreference3.addEventListener('change', handleJobPreferenceChange);
	fields.recreationPreference.addEventListener('change', handleRecreationPreferenceChange);
	
	handleFirstNameInput();
	handleLastNameInput();
	handleJobPreferenceChange();
	handleRecreationPreferenceChange();
}

window.step.saveFields = function() {
	const fields = window.step.fields;
	const actions = window.step.actions;
	
	actions.firstName = fields.firstName.value;
	actions.lastName = fields.lastName.value;
	actions.jobPreference1 = fields.jobPreference1.value;
	actions.jobPreference2 = fields.jobPreference2.value;	
	actions.jobPreference3 = fields.jobPreference3.value;
	actions.recreationPreference = fields.recreationPreference.value;
}

//--- Event handlers ----------------------------------------------------------------------------//
function handleFirstNameInput() {
	validateName(window.step.fields.firstName);
	debouncedCheckNameAvailability(); 
	window.step.validate();
}

function handleLastNameInput() {
	validateName(window.step.fields.lastName);
	debouncedCheckNameAvailability(); 
	window.step.validate();
}

function handleJobPreferenceChange() {
	const selects = [window.step.fields.jobPreference1, 
					 window.step.fields.jobPreference2, 
					 window.step.fields.jobPreference3];
	const selectedValues = selects.map(select => select.value);
	
	selects.forEach((select, index) => {
		const otherSelectedValues = selectedValues.filter((_, i) => i !== index);
		
		Array.from(select.options).forEach(option => {
			option.disabled = otherSelectedValues.includes(option.value);
		});
	});
	
	window.step.validate();
}

function handleRecreationPreferenceChange() {
	window.step.validate();
}

//--- Helpers -----------------------------------------------------------------------------------//
function validateName(nameInput) {
	const name = nameInput.value;
	const minLength = 2;
	const maxLength = 32;
	const regex = /^[A-Za-zÀ-ÖØ-öø-ÿĀ-ž]+(?:[ '-][A-Za-zÀ-ÖØ-öø-ÿĀ-ž]+)*$/;

	if (name.length < minLength) {
		nameInput.setCustomValidity(`Minimaal ${minLength} tekens vereist.`);
	} else if (name.length > maxLength) {
		nameInput.setCustomValidity(`Maximaal ${maxLength} tekens toegestaan.`);
	} else if (name !== name.trim()) {
		nameInput.setCustomValidity(
			'Spaties aan het begin of het einde zijn niet toegestaan.');
	} else if (!regex.test(name)) {
		nameInput.setCustomValidity(
			'Alleen letters, spatie, apostrof en koppelteken zijn toegestaan.');
	} else {
		nameInput.setCustomValidity('');
	}
	
	nameInput.reportValidity();
}

async function checkNameAvailability() {
	const fields = window.step.fields;
	
	const firstName = fields.firstName.value;
	const lastName = fields.lastName.value;

	if (!firstName || !lastName) return;

	try {
		const params = new URLSearchParams({
			firstName,
			lastName,
		});
		const res = await fetch(`/game/turn/check-character-name?${params}`);
		const { available } = await res.json();

		if (!available) {
			fields.lastName.setCustomValidity(
				'Deze combinatie van voornaam en achternaam is al in gebruik.'
			);
		} else {
			fields.lastName.setCustomValidity('');
		}

		fields.lastName.reportValidity();
		window.step.validate();
	} catch (err) {
		console.error(err);
		window.step.validate();
	}
}

function debounce(fn, delay) {
	let timeoutId;
	return function(...args) {
		clearTimeout(timeoutId);
		timeoutId = setTimeout(() => fn.apply(this, args), delay);
	};
}

//--- DOM content loaded ------------------------------------------------------------------------//
document.addEventListener('DOMContentLoaded', () => {
	window.step.initialize();
});
</script>