{{#block "title"}}Personage aanpassen{{/block}}

{{#block "headScripts"}}
<script src="/js/turn.js"></script>
<script>
	ensureBeginTurn();
	
	window.stepData = {
		steps: JSON.parse(localStorage.getItem('steps')),
		firstStep: parseInt(localStorage.getItem('firstStep'), 10),
		lastStep: parseInt(localStorage.getItem('lastStep'), 10),
		currentStep: parseInt(localStorage.getItem('currentStep'), 10),
		thisStep: 0
	};
	
	ensureValidStep(window.stepData);
</script>
{{/block}}

<div id="container-div" class="container-compact d-none">
	<h1>Personage aanpassen</h1>
	
	<button id="finish-button" class="button-1">Voltooien</button>
	<button id="next-button" class="button-1">Volgende →</button>
	<button id="back-button" class="button-1">← Vorige</button>
	
	<a class="button-2" href="/game">↑ Spelmenu</a>
	
	<!--form id="customize-character-form" method="POST" action="/game/setup/customize-character">
		<div class="field">
			<label for="first-name" class="form-label">Voornaam:</label>
			<input id="first-name" class="form-control" type="text" name="firstName" value="{{firstName}}" required>
		</div>
		
		<div class="field">
			<label for="last-name" class="form-label">Achternaam:</label>
			<input id="last-name" class="form-control" type="text" name="lastName" value="{{lastName}}" required>
		</div>
		
		<p class="error" id="name-error">{{nameError}}</p>
		
		<div class="field">
			<label for="job-preference-1" class="form-label">Jobvoorkeur (★★★):</label>
			<select id="job-preference-1" class="form-select" name="jobPreference1" required>
				{{#each jobs}}
					<option value="{{this.id}}" {{#if (eq @index 0)}}selected{{/if}}>{{this.name}}</option>
				{{/each}}
			</select>
		</div>
		
		<div class="field">
			<label for="job-preference-2" class="form-label">Jobvoorkeur (★★):</label>
			<select id="job-preference-2" class="form-select" name="jobPreference2" required>
				{{#each jobs}}
					<option value="{{this.id}}" {{#if (eq @index 1)}}selected{{/if}}>{{this.name}}</option>
				{{/each}}
			</select>
		</div>
		
		<div class="field">
			<label for="job-preference-3" class="form-label">Jobvoorkeur (★):</label>
			<select id="job-preference-3" class="form-select" name="jobPreference3" required>
				{{#each jobs}}
					<option value="{{this.id}}" {{#if (eq @index 2)}}selected{{/if}}>{{this.name}}</option>
				{{/each}}
			</select>
		</div>
		
		<div class="field">
			<label for="recreation-preference" class="form-label">Ontspanningsvoorkeur (★★★):</label>
			<select id="recreation-preference" class="form-select" name="recreationPreference" required>
				{{#each recreations}}
					<option value="{{this.id}}">{{this.name}}</option>
				{{/each}}
			</select>
		</div>
		
		<button class="button-1" type="submit">Volgende</button>
	</form-->
</div>

<script>
function clickNext() {
	goToNextStep(stepData);
}

function clickBack() {
	goToPreviousStep(stepData);
}
	
document.addEventListener('DOMContentLoaded', () => {
	const containerDiv = document.getElementById('container-div');
	const finishButton = document.getElementById('finish-button');
	const nextButton = document.getElementById('next-button');
	const backButton = document.getElementById('back-button');
	
	const isFirstStep = (window.stepData.thisStep === window.stepData.firstStep);
	const isLastStep = (window.stepData.thisStep === window.stepData.lastStep);
	
	if (isLastStep) {
		nextButton.classList.add('d-none');
	} else {
		finishButton.classList.add('d-none');
	}
	if (isFirstStep) {
		backButton.classList.add('d-none');
	}
	
	nextButton.addEventListener('click', clickNext);
	backButton.addEventListener('click', clickBack);
	
	containerDiv.classList.remove('d-none');
	
	//window.location.assign('/game/turn/end');
	
	/*//--- Elements ------------------------------------------------------------------------------//
	const firstNameInput = document.getElementById('first-name');
	const lastNameInput = document.getElementById('last-name');
	const jobPreference1Select = document.getElementById('job-preference-1');
	const jobPreference2Select = document.getElementById('job-preference-2');
	const jobPreference3Select = document.getElementById('job-preference-3');
	
	const nameError = document.getElementById('name-error');
	
	//--- Execute on load -----------------------------------------------------------------------//
	handleJobPreferenceChange();
	
	//--- Event listeners -----------------------------------------------------------------------//
	firstNameInput.addEventListener('input', handleFirstNameInput);
	lastNameInput.addEventListener('input', handleLastNameInput);
	jobPreference1Select.addEventListener('change', handleJobPreferenceChange);
	jobPreference2Select.addEventListener('change', handleJobPreferenceChange);
	jobPreference3Select.addEventListener('change', handleJobPreferenceChange);
	
	//--- Event handlers ------------------------------------------------------------------------//
	function handleCurrentPasswordInput() {
		passwordError.textContent = '';
	}
	
	function handleFirstNameInput() {
		nameError.textContent = '';
		validateName(firstNameInput);
	}
	
	function handleLastNameInput() {
		nameError.textContent = '';
		validateName(lastNameInput);
	}
	
	function handleJobPreferenceChange() {
		const selects = [jobPreference1Select, jobPreference2Select, jobPreference3Select];
		const selectedValues = selects.map(select => select.value);
		
		selects.forEach((select, index) => {
			const otherSelectedValues = selectedValues.filter((_, i) => i !== index);
			
			Array.from(select.options).forEach(option => {
				option.disabled = otherSelectedValues.includes(option.value);
			});
		});
	}
	
	//--- Helpers -------------------------------------------------------------------------------//
	function validateName(nameInput) {
		const name = nameInput.value;
		const minLength = 2;
		const maxLength = 32;
		const regex = /^[A-Za-zÀ-ÖØ-öø-ÿĀ-ž]+(?:[ '-][A-Za-zÀ-ÖØ-öø-ÿĀ-ž]+)*$/;
  
		if (name.length < minLength) {
			nameInput.setCustomValidity(`Minimaal ${minLength} tekens vereist.`);
		} else if (name.length > maxLength) {
			nameInput.setCustomValidity(`Maximaal ${maxLength} tekens toegestaan.`);
		} else if (name !== name.trim()) {
			nameInput.setCustomValidity(
				'Spaties aan het begin of het einde zijn niet toegestaan.');
		} else if (!regex.test(name)) {
			nameInput.setCustomValidity(
				'Alleen letters, spatie, apostrof en koppelteken zijn toegestaan.');
		} else {
			nameInput.setCustomValidity('');
		}
		
		nameInput.reportValidity();
	}*/
});
</script>